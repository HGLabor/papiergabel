From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mooziii <63669478+mooziii@users.noreply.github.com>
Date: Sun, 12 Jun 2022 18:42:33 +0200
Subject: [PATCH] fix


diff --git a/src/main/java/net/fabricmc/loader/impl/game/minecraft/MinecraftGameProvider.java b/src/main/java/net/fabricmc/loader/impl/game/minecraft/MinecraftGameProvider.java
index ebd66c1d7aa508114b56234317cfca87f979252a..1677cbeba3f1708388f573a2de6f27dd12c572d6 100644
--- a/src/main/java/net/fabricmc/loader/impl/game/minecraft/MinecraftGameProvider.java
+++ b/src/main/java/net/fabricmc/loader/impl/game/minecraft/MinecraftGameProvider.java
@@ -447,7 +447,7 @@ public class MinecraftGameProvider implements GameProvider {
 		}
 
 		try {
-			invoker.invokeExact(arguments.toArray());
+			invoker.invokeExact(org.bukkit.craftbukkit.Main.parser.parse(arguments.toArray()));
 		} catch (Throwable t) {
 			throw new FormattedException("Minecraft has crashed!", t);
 		}
diff --git a/src/main/java/net/fabricmc/loader/impl/launch/FabricMixinBootstrap.java b/src/main/java/net/fabricmc/loader/impl/launch/FabricMixinBootstrap.java
index 563393057f09b12e21da7c72f67ab5305e2913f9..f76664b8ba4fda80fcfe6ab77968f4f6a9f58a7d 100644
--- a/src/main/java/net/fabricmc/loader/impl/launch/FabricMixinBootstrap.java
+++ b/src/main/java/net/fabricmc/loader/impl/launch/FabricMixinBootstrap.java
@@ -53,8 +53,14 @@ public final class FabricMixinBootstrap {
 		System.setProperty("mixin.bootstrapService", MixinServiceKnotBootstrap.class.getName());
 		System.setProperty("mixin.service", MixinServiceKnot.class.getName());
 
-		MixinBootstrap.init();
-
+		try {
+            System.out.println(":PauseChamp:");
+            MixinBootstrap.init();
+            System.out.println("YO FUCKING MIXIN LETS GO");
+        } catch (Throwable e) {
+            e.printStackTrace();
+        }
+        System.out.println("Hello");
 		if (FabricLauncherBase.getLauncher().isDevelopment()) {
 			MappingConfiguration mappingConfiguration = FabricLauncherBase.getLauncher().getMappingConfiguration();
 			TinyTree mappings = mappingConfiguration.getMappings();
@@ -80,6 +86,7 @@ public final class FabricMixinBootstrap {
 		Map<String, ModContainerImpl> configToModMap = new HashMap<>();
 
 		for (ModContainerImpl mod : loader.getModsInternal()) {
+            System.out.println(mod.getMetadata().getId());
 			for (String config : mod.getMetadata().getMixinConfigs(side)) {
 				ModContainerImpl prev = configToModMap.putIfAbsent(config, mod);
 				if (prev != null) throw new RuntimeException(String.format("Non-unique Mixin config name %s used by the mods %s and %s", config, prev.getMetadata().getId(), mod.getMetadata().getId()));
@@ -97,13 +104,14 @@ public final class FabricMixinBootstrap {
 			if (mod == null) continue;
 		}
 
+        System.out.println("Yallah");
 		try {
 			IMixinConfig.class.getMethod("decorate", String.class, Object.class);
 			MixinConfigDecorator.apply(configToModMap);
 		} catch (NoSuchMethodException e) {
 			Log.info(LogCategory.MIXIN, "Detected old Mixin version without config decoration support");
 		}
-
+        System.out.println("ola");
 		initialized = true;
 	}
 
diff --git a/src/main/java/net/fabricmc/loader/impl/launch/knot/Knot.java b/src/main/java/net/fabricmc/loader/impl/launch/knot/Knot.java
index 81fda02d810767e6c1d05beae45cec27d057dc80..ab2fb7a159cfa18cb7e1fd59dea31f62be256779 100644
--- a/src/main/java/net/fabricmc/loader/impl/launch/knot/Knot.java
+++ b/src/main/java/net/fabricmc/loader/impl/launch/knot/Knot.java
@@ -145,15 +145,20 @@ public final class Knot extends FabricLauncherBase {
 		FabricLoaderImpl.INSTANCE.loadAccessWideners();
 
 		FabricMixinBootstrap.init(getEnvironmentType(), loader);
+        System.out.println("INIT COMPLETE");
 		FabricLauncherBase.finishMixinBootstrapping();
+        System.out.println("Mixins Finished!");
 
 		classLoader.initializeTransformers();
+        System.out.println("initted transformers");
 
 		provider.unlockClassPath(this);
+        System.out.println("Class path unlocked");
 		unlocked = true;
 
 		try {
 			EntrypointUtils.invoke("preLaunch", PreLaunchEntrypoint.class, PreLaunchEntrypoint::onPreLaunch);
+            System.out.println("Invoking preLaunch Entrypoint");
 		} catch (RuntimeException e) {
 			throw new FormattedException("A mod crashed on startup!", e);
 		}
diff --git a/src/main/java/net/fabricmc/loader/impl/launch/knot/KnotClassDelegate.java b/src/main/java/net/fabricmc/loader/impl/launch/knot/KnotClassDelegate.java
index 26c4b755eb9f73d170a55d1f0ef56470d04085c0..450cdc08f3f14e51bf28fcfdc1615d11e6e54b17 100644
--- a/src/main/java/net/fabricmc/loader/impl/launch/knot/KnotClassDelegate.java
+++ b/src/main/java/net/fabricmc/loader/impl/launch/knot/KnotClassDelegate.java
@@ -224,7 +224,7 @@ final class KnotClassDelegate<T extends ClassLoader & KnotClassDelegate.ClassLoa
 							// - using jars that are only transient (deobfuscation input or pass-through installers)
 							String msg = String.format("can't load class %s at %s as it hasn't been exposed to the game (yet?)", name, getCodeSource(url, fileName));
 							if (LOG_CLASS_LOAD_ERRORS) Log.warn(LogCategory.KNOT, msg);
-							throw new ClassNotFoundException(msg);
+				//			throw new ClassNotFoundException(msg);
 						} else { // load from system cl
 							if (LOG_CLASS_LOAD) Log.info(LogCategory.KNOT, "loading class %s using the parent class loader", name);
 							c = parentClassLoader.loadClass(name);
@@ -263,7 +263,7 @@ final class KnotClassDelegate<T extends ClassLoader & KnotClassDelegate.ClassLoa
 		}
 	}
 
-	Class<?> tryLoadClass(String name, boolean allowFromParent) throws ClassNotFoundException {
+	Class<?> tryLoadClass(String name, boolean allowFromParent) {
 		if (name.startsWith("java.")) {
 			return null;
 		}
@@ -290,7 +290,7 @@ final class KnotClassDelegate<T extends ClassLoader & KnotClassDelegate.ClassLoa
 					if (!found) {
 						String msg = "class "+name+" is currently restricted from being loaded";
 						if (LOG_CLASS_LOAD_ERRORS) Log.warn(LogCategory.KNOT, msg);
-						throw new ClassNotFoundException(msg);
+						//throw new ClassNotFoundException(msg);
 					}
 				}
 			}
diff --git a/src/main/java/net/fabricmc/loader/impl/launch/knot/KnotClassLoader.java b/src/main/java/net/fabricmc/loader/impl/launch/knot/KnotClassLoader.java
index 09880e46e3e8431bffc462f0484c1e58d2112274..42aa17f1af853981f9da1c7c583d86ee4fd793f7 100644
--- a/src/main/java/net/fabricmc/loader/impl/launch/knot/KnotClassLoader.java
+++ b/src/main/java/net/fabricmc/loader/impl/launch/knot/KnotClassLoader.java
@@ -19,6 +19,7 @@ package net.fabricmc.loader.impl.launch.knot;
 import net.fabricmc.api.EnvType;
 import net.fabricmc.loader.impl.game.GameProvider;
 import net.fabricmc.loader.impl.launch.knot.KnotClassDelegate.ClassLoaderAccess;
+import org.slf4j.spi.SLF4JServiceProvider;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -141,9 +142,16 @@ final class KnotClassLoader extends SecureClassLoader implements ClassLoaderAcce
 	}
 
 	@Override
-	protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
-		return delegate.loadClass(name, resolve);
-	}
+	protected Class<?> loadClass(String name, boolean resolve) {
+        try {
+            return delegate.loadClass(name, resolve);
+        } catch (ClassNotFoundException e) {
+            if(name == SLF4JServiceProvider.class.getName()) {
+                return SLF4JServiceProvider.class;
+            }
+            throw new RuntimeException(e);
+        }
+    }
 
 	@Override
 	protected Class<?> findClass(String name) throws ClassNotFoundException {
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index b299c89d19e1bc3444d8badcd1201e4345e1b98c..0a932ca4a19a2022b1e0b8517ee6201288f0a91a 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -28,6 +28,140 @@ import org.slf4j.spi.SLF4JServiceProvider;
 import org.spongepowered.asm.mixin.MixinEnvironment;
 
 public class Main {
+    // papiergabel start
+    public static OptionParser parser = new OptionParser() {
+        {
+            acceptsAll(Main.asList("?", "help"), "Show the help");
+
+            acceptsAll(Main.asList("c", "config"), "Properties file to use")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("server.properties"))
+                .describedAs("Properties file");
+
+            acceptsAll(Main.asList("P", "plugins"), "Plugin directory to use")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("plugins"))
+                .describedAs("Plugin directory");
+
+            acceptsAll(Main.asList("h", "host", "server-ip"), "Host to listen on")
+                .withRequiredArg()
+                .ofType(String.class)
+                .describedAs("Hostname or IP");
+
+            acceptsAll(Main.asList("W", "world-dir", "universe", "world-container"), "World container")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("."))
+                .describedAs("Directory containing worlds");
+
+            acceptsAll(Main.asList("w", "world", "level-name"), "World name")
+                .withRequiredArg()
+                .ofType(String.class)
+                .describedAs("World name");
+
+            acceptsAll(Main.asList("p", "port", "server-port"), "Port to listen on")
+                .withRequiredArg()
+                .ofType(Integer.class)
+                .describedAs("Port");
+
+            acceptsAll(Main.asList("o", "online-mode"), "Whether to use online authentication")
+                .withRequiredArg()
+                .ofType(Boolean.class)
+                .describedAs("Authentication");
+
+            acceptsAll(Main.asList("s", "size", "max-players"), "Maximum amount of players")
+                .withRequiredArg()
+                .ofType(Integer.class)
+                .describedAs("Server size");
+
+            acceptsAll(Main.asList("d", "date-format"), "Format of the date to display in the console (for log entries)")
+                .withRequiredArg()
+                .ofType(SimpleDateFormat.class)
+                .describedAs("Log date format");
+
+            acceptsAll(Main.asList("log-pattern"), "Specfies the log filename pattern")
+                .withRequiredArg()
+                .ofType(String.class)
+                .defaultsTo("server.log")
+                .describedAs("Log filename");
+
+            acceptsAll(Main.asList("log-limit"), "Limits the maximum size of the log file (0 = unlimited)")
+                .withRequiredArg()
+                .ofType(Integer.class)
+                .defaultsTo(0)
+                .describedAs("Max log size");
+
+            acceptsAll(Main.asList("log-count"), "Specified how many log files to cycle through")
+                .withRequiredArg()
+                .ofType(Integer.class)
+                .defaultsTo(1)
+                .describedAs("Log count");
+
+            acceptsAll(Main.asList("log-append"), "Whether to append to the log file")
+                .withRequiredArg()
+                .ofType(Boolean.class)
+                .defaultsTo(true)
+                .describedAs("Log append");
+
+            acceptsAll(Main.asList("log-strip-color"), "Strips color codes from log file");
+
+            acceptsAll(Main.asList("b", "bukkit-settings"), "File for bukkit settings")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("bukkit.yml"))
+                .describedAs("Yml file");
+
+            acceptsAll(Main.asList("C", "commands-settings"), "File for command settings")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("commands.yml"))
+                .describedAs("Yml file");
+
+            acceptsAll(Main.asList("forceUpgrade"), "Whether to force a world upgrade");
+            acceptsAll(Main.asList("eraseCache"), "Whether to force cache erase during world upgrade");
+            acceptsAll(Main.asList("nogui"), "Disables the graphical console");
+
+            acceptsAll(Main.asList("nojline"), "Disables jline and emulates the vanilla console");
+
+            acceptsAll(Main.asList("noconsole"), "Disables the console");
+
+            acceptsAll(Main.asList("v", "version"), "Show the CraftBukkit Version");
+
+            acceptsAll(Main.asList("demo"), "Demo mode");
+
+            // Spigot Start
+            acceptsAll(Main.asList("S", "spigot-settings"), "File for spigot settings")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("spigot.yml"))
+                .describedAs("Yml file");
+            // Spigot End
+
+            // Paper Start
+            acceptsAll(asList("paper", "paper-settings"), "File for paper settings")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File("paper.yml"))
+                .describedAs("Yml file");
+
+            acceptsAll(asList("add-plugin", "add-extra-plugin-jar"), "Specify paths to extra plugin jars to be loaded in addition to those in the plugins folder. This argument can be specified multiple times, once for each extra plugin jar path.")
+                .withRequiredArg()
+                .ofType(File.class)
+                .defaultsTo(new File[] {})
+                .describedAs("Jar file");
+            // Paper end
+
+            // Paper start
+            acceptsAll(asList("server-name"), "Name of the server")
+                .withRequiredArg()
+                .ofType(String.class)
+                .defaultsTo("Unknown Server")
+                .describedAs("Name");
+            // Paper end
+        }
+    };
     public static boolean useJline = true;
     public static boolean useConsole = true;
 
@@ -40,140 +174,9 @@ public class Main {
         // Paper end
         // Todo: Installation script
         if (System.getProperty("jdk.nio.maxCachedBufferSize") == null) System.setProperty("jdk.nio.maxCachedBufferSize", "262144"); // Paper - cap per-thread NIO cache size
-        OptionParser parser = new OptionParser() {
-            {
-                acceptsAll(Main.asList("?", "help"), "Show the help");
-
-                acceptsAll(Main.asList("c", "config"), "Properties file to use")
-                        .withRequiredArg()
-                        .ofType(File.class)
-                        .defaultsTo(new File("server.properties"))
-                        .describedAs("Properties file");
-
-                acceptsAll(Main.asList("P", "plugins"), "Plugin directory to use")
-                        .withRequiredArg()
-                        .ofType(File.class)
-                        .defaultsTo(new File("plugins"))
-                        .describedAs("Plugin directory");
-
-                acceptsAll(Main.asList("h", "host", "server-ip"), "Host to listen on")
-                        .withRequiredArg()
-                        .ofType(String.class)
-                        .describedAs("Hostname or IP");
-
-                acceptsAll(Main.asList("W", "world-dir", "universe", "world-container"), "World container")
-                        .withRequiredArg()
-                        .ofType(File.class)
-                        .defaultsTo(new File("."))
-                        .describedAs("Directory containing worlds");
-
-                acceptsAll(Main.asList("w", "world", "level-name"), "World name")
-                        .withRequiredArg()
-                        .ofType(String.class)
-                        .describedAs("World name");
-
-                acceptsAll(Main.asList("p", "port", "server-port"), "Port to listen on")
-                        .withRequiredArg()
-                        .ofType(Integer.class)
-                        .describedAs("Port");
-
-                acceptsAll(Main.asList("o", "online-mode"), "Whether to use online authentication")
-                        .withRequiredArg()
-                        .ofType(Boolean.class)
-                        .describedAs("Authentication");
-
-                acceptsAll(Main.asList("s", "size", "max-players"), "Maximum amount of players")
-                        .withRequiredArg()
-                        .ofType(Integer.class)
-                        .describedAs("Server size");
-
-                acceptsAll(Main.asList("d", "date-format"), "Format of the date to display in the console (for log entries)")
-                        .withRequiredArg()
-                        .ofType(SimpleDateFormat.class)
-                        .describedAs("Log date format");
-
-                acceptsAll(Main.asList("log-pattern"), "Specfies the log filename pattern")
-                        .withRequiredArg()
-                        .ofType(String.class)
-                        .defaultsTo("server.log")
-                        .describedAs("Log filename");
-
-                acceptsAll(Main.asList("log-limit"), "Limits the maximum size of the log file (0 = unlimited)")
-                        .withRequiredArg()
-                        .ofType(Integer.class)
-                        .defaultsTo(0)
-                        .describedAs("Max log size");
-
-                acceptsAll(Main.asList("log-count"), "Specified how many log files to cycle through")
-                        .withRequiredArg()
-                        .ofType(Integer.class)
-                        .defaultsTo(1)
-                        .describedAs("Log count");
-
-                acceptsAll(Main.asList("log-append"), "Whether to append to the log file")
-                        .withRequiredArg()
-                        .ofType(Boolean.class)
-                        .defaultsTo(true)
-                        .describedAs("Log append");
-
-                acceptsAll(Main.asList("log-strip-color"), "Strips color codes from log file");
-
-                acceptsAll(Main.asList("b", "bukkit-settings"), "File for bukkit settings")
-                        .withRequiredArg()
-                        .ofType(File.class)
-                        .defaultsTo(new File("bukkit.yml"))
-                        .describedAs("Yml file");
-
-                acceptsAll(Main.asList("C", "commands-settings"), "File for command settings")
-                        .withRequiredArg()
-                        .ofType(File.class)
-                        .defaultsTo(new File("commands.yml"))
-                        .describedAs("Yml file");
-
-                acceptsAll(Main.asList("forceUpgrade"), "Whether to force a world upgrade");
-                acceptsAll(Main.asList("eraseCache"), "Whether to force cache erase during world upgrade");
-                acceptsAll(Main.asList("nogui"), "Disables the graphical console");
-
-                acceptsAll(Main.asList("nojline"), "Disables jline and emulates the vanilla console");
-
-                acceptsAll(Main.asList("noconsole"), "Disables the console");
-
-                acceptsAll(Main.asList("v", "version"), "Show the CraftBukkit Version");
-
-                acceptsAll(Main.asList("demo"), "Demo mode");
-
-                // Spigot Start
-                acceptsAll(Main.asList("S", "spigot-settings"), "File for spigot settings")
-                        .withRequiredArg()
-                        .ofType(File.class)
-                        .defaultsTo(new File("spigot.yml"))
-                        .describedAs("Yml file");
-                // Spigot End
-
-                // Paper Start
-                acceptsAll(asList("paper", "paper-settings"), "File for paper settings")
-                        .withRequiredArg()
-                        .ofType(File.class)
-                        .defaultsTo(new File("paper.yml"))
-                        .describedAs("Yml file");
-
-                acceptsAll(asList("add-plugin", "add-extra-plugin-jar"), "Specify paths to extra plugin jars to be loaded in addition to those in the plugins folder. This argument can be specified multiple times, once for each extra plugin jar path.")
-                        .withRequiredArg()
-                        .ofType(File.class)
-                        .defaultsTo(new File[] {})
-                        .describedAs("Jar file");
-                // Paper end
 
-                // Paper start
-                acceptsAll(asList("server-name"), "Name of the server")
-                        .withRequiredArg()
-                        .ofType(String.class)
-                        .defaultsTo("Unknown Server")
-                        .describedAs("Name");
-                // Paper end
-            }
-        };
 
+        // papiergabel end
         OptionSet options = null;
 
         // Paper start - preload logger classes to avoid plugins mixing versions
@@ -305,7 +308,7 @@ public class Main {
                 if(PapiergabelConfig.experimental.loadFabricMods) {
                     System.out.println("Trying to launch knot, please wait");
                     try {
-                        new Knot(EnvType.SERVER).init(args);
+                        Knot.launch(args, EnvType.SERVER);
                     } catch (Throwable t) {
                         t.printStackTrace();
                         System.out.println("**--------------------------------------------------------------------------**");
