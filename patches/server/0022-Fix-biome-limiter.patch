From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mooziii <63669478+mooziii@users.noreply.github.com>
Date: Sat, 9 Jul 2022 15:03:40 +0200
Subject: [PATCH] Fix biome limiter


diff --git a/src/main/java/de/hglabor/papiergabel/PapiergabelMain.java b/src/main/java/de/hglabor/papiergabel/PapiergabelMain.java
index 1d717f416b414c863129c7ebe06916e2fa264087..5862950c3e98ba5532a554a00e57d45a11dd1081 100644
--- a/src/main/java/de/hglabor/papiergabel/PapiergabelMain.java
+++ b/src/main/java/de/hglabor/papiergabel/PapiergabelMain.java
@@ -8,11 +8,7 @@ import java.io.File;
 
 public class PapiergabelMain {
 
-    public static void initPapiergabel() throws Exception {
-    }
-
-    public static void postLoad(MinecraftServer server) {
-        server.server.getCommandMap().register("papiergabel", "papiergabel", new PapiergabelCommand());
+    public static void initPapiergabel() {
         try {
             PapiergabelConfig.set(new PapiergabelConfig(), new File("papiergabel.yml"));
         } catch (Throwable t) {
@@ -20,4 +16,8 @@ public class PapiergabelMain {
         }
     }
 
+    public static void postLoad(MinecraftServer server) {
+        server.server.getCommandMap().register("papiergabel", "papiergabel", new PapiergabelCommand());
+    }
+
 }
diff --git a/src/main/java/net/minecraft/data/BuiltinRegistries.java b/src/main/java/net/minecraft/data/BuiltinRegistries.java
deleted file mode 100644
index 41a7965a96204840bd6f45cad8f67dfe261d6f18..0000000000000000000000000000000000000000
--- a/src/main/java/net/minecraft/data/BuiltinRegistries.java
+++ /dev/null
@@ -1,123 +0,0 @@
-package net.minecraft.data;
-
-import com.google.common.collect.Maps;
-import com.mojang.logging.LogUtils;
-import com.mojang.serialization.Lifecycle;
-import java.util.Map;
-import java.util.function.Function;
-import java.util.function.Supplier;
-import net.minecraft.core.Holder;
-import net.minecraft.core.MappedRegistry;
-import net.minecraft.core.Registry;
-import net.minecraft.core.RegistryAccess;
-import net.minecraft.core.WritableRegistry;
-import net.minecraft.data.worldgen.Carvers;
-import net.minecraft.data.worldgen.DimensionTypes;
-import net.minecraft.data.worldgen.NoiseData;
-import net.minecraft.data.worldgen.Pools;
-import net.minecraft.data.worldgen.ProcessorLists;
-import net.minecraft.data.worldgen.StructureSets;
-import net.minecraft.data.worldgen.Structures;
-import net.minecraft.data.worldgen.biome.Biomes;
-import net.minecraft.data.worldgen.features.FeatureUtils;
-import net.minecraft.data.worldgen.placement.PlacementUtils;
-import net.minecraft.network.chat.ChatType;
-import net.minecraft.resources.ResourceKey;
-import net.minecraft.resources.ResourceLocation;
-import net.minecraft.world.level.biome.Biome;
-import net.minecraft.world.level.dimension.DimensionType;
-import net.minecraft.world.level.levelgen.DensityFunction;
-import net.minecraft.world.level.levelgen.NoiseGeneratorSettings;
-import net.minecraft.world.level.levelgen.NoiseRouterData;
-import net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver;
-import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
-import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorPreset;
-import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorPresets;
-import net.minecraft.world.level.levelgen.placement.PlacedFeature;
-import net.minecraft.world.level.levelgen.presets.WorldPreset;
-import net.minecraft.world.level.levelgen.presets.WorldPresets;
-import net.minecraft.world.level.levelgen.structure.Structure;
-import net.minecraft.world.level.levelgen.structure.StructureSet;
-import net.minecraft.world.level.levelgen.structure.pools.StructureTemplatePool;
-import net.minecraft.world.level.levelgen.structure.templatesystem.StructureProcessorList;
-import net.minecraft.world.level.levelgen.synth.NormalNoise;
-import org.slf4j.Logger;
-
-public class BuiltinRegistries {
-    private static final Logger LOGGER = LogUtils.getLogger();
-    private static final Map<ResourceLocation, Supplier<? extends Holder<?>>> LOADERS = Maps.newLinkedHashMap();
-    private static final WritableRegistry<WritableRegistry<?>> WRITABLE_REGISTRY = new MappedRegistry<>(ResourceKey.createRegistryKey(new ResourceLocation("root")), Lifecycle.experimental(), (Function<WritableRegistry<?>, Holder.Reference<WritableRegistry<?>>>)null);
-    public static final Registry<? extends Registry<?>> REGISTRY = WRITABLE_REGISTRY;
-    public static final Registry<DimensionType> DIMENSION_TYPE = registerSimple(Registry.DIMENSION_TYPE_REGISTRY, DimensionTypes::bootstrap);
-    public static final Registry<ConfiguredWorldCarver<?>> CONFIGURED_CARVER = registerSimple(Registry.CONFIGURED_CARVER_REGISTRY, (registry) -> {
-        return Carvers.CAVE;
-    });
-    public static final Registry<ConfiguredFeature<?, ?>> CONFIGURED_FEATURE = registerSimple(Registry.CONFIGURED_FEATURE_REGISTRY, FeatureUtils::bootstrap);
-    public static final Registry<PlacedFeature> PLACED_FEATURE = registerSimple(Registry.PLACED_FEATURE_REGISTRY, PlacementUtils::bootstrap);
-    public static final Registry<Structure> STRUCTURES = registerSimple(Registry.STRUCTURE_REGISTRY, Structures::bootstrap);
-    public static final Registry<StructureSet> STRUCTURE_SETS = registerSimple(Registry.STRUCTURE_SET_REGISTRY, StructureSets::bootstrap);
-    public static final Registry<StructureProcessorList> PROCESSOR_LIST = registerSimple(Registry.PROCESSOR_LIST_REGISTRY, (registry) -> {
-        return ProcessorLists.ZOMBIE_PLAINS;
-    });
-    public static final Registry<StructureTemplatePool> TEMPLATE_POOL = registerSimple(Registry.TEMPLATE_POOL_REGISTRY, Pools::bootstrap);
-    public static final Registry<Biome> BIOME = registerSimple(Registry.BIOME_REGISTRY, Biomes::bootstrap);
-    public static final Registry<NormalNoise.NoiseParameters> NOISE = registerSimple(Registry.NOISE_REGISTRY, NoiseData::bootstrap);
-    public static final Registry<DensityFunction> DENSITY_FUNCTION = registerSimple(Registry.DENSITY_FUNCTION_REGISTRY, NoiseRouterData::bootstrap);
-    public static final Registry<NoiseGeneratorSettings> NOISE_GENERATOR_SETTINGS = registerSimple(Registry.NOISE_GENERATOR_SETTINGS_REGISTRY, NoiseGeneratorSettings::bootstrap);
-    public static final Registry<WorldPreset> WORLD_PRESET = registerSimple(Registry.WORLD_PRESET_REGISTRY, WorldPresets::bootstrap);
-    public static final Registry<FlatLevelGeneratorPreset> FLAT_LEVEL_GENERATOR_PRESET = registerSimple(Registry.FLAT_LEVEL_GENERATOR_PRESET_REGISTRY, FlatLevelGeneratorPresets::bootstrap);
-    public static final Registry<ChatType> CHAT_TYPE = registerSimple(Registry.CHAT_TYPE_REGISTRY, ChatType::bootstrap);
-    public static final RegistryAccess ACCESS;
-
-    private static <T> Registry<T> registerSimple(ResourceKey<? extends Registry<T>> registryRef, BuiltinRegistries.RegistryBootstrap<T> initializer) {
-        return registerSimple(registryRef, Lifecycle.stable(), initializer);
-    }
-
-    private static <T> Registry<T> registerSimple(ResourceKey<? extends Registry<T>> registryRef, Lifecycle lifecycle, BuiltinRegistries.RegistryBootstrap<T> initializer) {
-        return internalRegister(registryRef, new MappedRegistry<>(registryRef, lifecycle, (Function<T, Holder.Reference<T>>)null), initializer, lifecycle);
-    }
-
-    private static <T, R extends WritableRegistry<T>> R internalRegister(ResourceKey<? extends Registry<T>> registryRef, R registry, BuiltinRegistries.RegistryBootstrap<T> initializer, Lifecycle lifecycle) {
-        ResourceLocation resourceLocation = registryRef.location();
-        LOADERS.put(resourceLocation, () -> {
-            return initializer.run(registry);
-        });
-        WRITABLE_REGISTRY.register(registryRef, registry, lifecycle);
-        return registry;
-    }
-
-    public static <V extends T, T> Holder<V> registerExact(Registry<T> registry, String id, V value) {
-        return register(registry, new ResourceLocation(id), (T)value);
-    }
-
-    public static <T> Holder<T> register(Registry<T> registry, String id, T object) {
-        return register(registry, new ResourceLocation(id), object);
-    }
-
-    public static <T> Holder<T> register(Registry<T> registry, ResourceLocation id, T object) {
-        return register(registry, ResourceKey.create(registry.key(), id), object);
-    }
-
-    public static <T> Holder<T> register(Registry<T> registry, ResourceKey<T> key, T object) {
-        return ((WritableRegistry)registry).register(key, object, Lifecycle.stable());
-    }
-
-    public static void bootstrap() {
-    }
-
-    static {
-        LOADERS.forEach((id, supplier) -> {
-            if (!supplier.get().isBound()) {
-                LOGGER.error("Unable to bootstrap registry '{}'", (Object)id);
-            }
-
-        });
-        Registry.checkRegistry(WRITABLE_REGISTRY);
-        ACCESS = RegistryAccess.fromRegistryOfRegistries(REGISTRY);
-    }
-
-    @FunctionalInterface
-    interface RegistryBootstrap<T> {
-        Holder<? extends T> run(Registry<T> registry);
-    }
-}
diff --git a/src/test/java/io/papermc/paper/world/structure/ConfiguredStructureTest.java b/src/test/java/io/papermc/paper/world/structure/ConfiguredStructureTest.java
index 61efebe1d363b34e2043ccc4c6e28bb714c2fa31..db579891a693246ce3d7e126e8d900b96798d045 100644
--- a/src/test/java/io/papermc/paper/world/structure/ConfiguredStructureTest.java
+++ b/src/test/java/io/papermc/paper/world/structure/ConfiguredStructureTest.java
@@ -1,7 +1,6 @@
 package io.papermc.paper.world.structure;
 
 import io.papermc.paper.registry.Reference;
-import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.Bootstrap;
diff --git a/src/test/java/org/bukkit/BiomeTest.java b/src/test/java/org/bukkit/BiomeTest.java
index 2ccc1ac837f1537f2f201f81aca24f744695a777..4d50862f6f4fc9b9d6ba356b0409aa629903b661 100644
--- a/src/test/java/org/bukkit/BiomeTest.java
+++ b/src/test/java/org/bukkit/BiomeTest.java
@@ -1,6 +1,5 @@
 package org.bukkit;
 
-import net.minecraft.data.BuiltinRegistries;
 import org.bukkit.block.Biome;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.support.AbstractTestingBase;
diff --git a/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java b/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java
index 690e2db9f75964b40ff20596d6b16b68d85884dc..ce739d8f060ae0c0f3ea316c999297b14078f1e0 100644
--- a/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java
@@ -3,7 +3,6 @@ package org.bukkit.craftbukkit.generator;
 import static org.junit.Assert.*;
 
 import net.minecraft.core.Registry;
-import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.world.level.biome.Biome;
 import org.bukkit.Material;
 import org.bukkit.block.data.BlockData;
